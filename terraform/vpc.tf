############
resource "aws_vpc" "my-vpc" {
  cidr_block           = "10.0.0.0/16" 
  enable_dns_hostnames = true          
  enable_dns_support   = true          
  instance_tenancy     = "default"
  enable_classiclink   = "false"

  tags = {
    Name = "${var.name}-vpc" 
  }
}

# Internet Gateway
resource "aws_internet_gateway" "gw" {
  vpc_id = aws_vpc.my-vpc.id

  tags = {
    Name = "${var.name}-internet_gateway"
    }
}

resource "aws_route_table" "rt" {
  vpc_id = aws_vpc.my-vpc.id

  tags = {
    Name = "${var.name}-route_table"
  }
}

# Route
resource "aws_route" "default-route" {
    route_table_id         = "${aws_route_table.rt.id}"
    destination_cidr_block = "0.0.0.0/0"
    gateway_id             = "${aws_internet_gateway.gw.id}"
    depends_on             = [
        aws_route_table.rt,
        aws_internet_gateway.gw
    ]
}

######
# Subnet
resource "aws_subnet" "my_subnet0" {
  vpc_id                  = aws_vpc.my-vpc.id
  cidr_block              = "10.0.101.0/24"
  availability_zone       = data.aws_availability_zones.available.names[0]
  map_public_ip_on_launch = true 

  tags = {
    Name = "${var.name}-subnet0"
  }
}

resource "aws_subnet" "my_subnet1" {
  vpc_id                  = aws_vpc.my-vpc.id
  cidr_block              = "10.0.102.0/24"
  availability_zone       = data.aws_availability_zones.available.names[1]
  map_public_ip_on_launch = true 

  tags = {
    Name = "${var.name}-subnet1"
  }
}

resource "aws_subnet" "my_subnet2" {
  vpc_id                  = aws_vpc.my-vpc.id
  cidr_block              = "10.0.103.0/24"
  availability_zone       = data.aws_availability_zones.available.names[2]
  map_public_ip_on_launch = true 

  tags = {
    Name = "${var.name}-subnet2"
  }
}

resource "aws_route_table_association" "rt_as_0" {
    subnet_id      = "${aws_subnet.my_subnet0.id}"
    route_table_id = "${aws_route_table.rt.id}"
}

resource "aws_route_table_association" "rt_as_1" {
    subnet_id      = "${aws_subnet.my_subnet1.id}"
    route_table_id = "${aws_route_table.rt.id}"
}

resource "aws_route_table_association" "rt_as_2" {
    subnet_id      = "${aws_subnet.my_subnet2.id}"
    route_table_id = "${aws_route_table.rt.id}"
}

######
#Net ACL
resource "aws_default_network_acl" "default" {
  default_network_acl_id = aws_vpc.my-vpc.default_network_acl_id

  ingress {
    protocol   = -1
    rule_no    = 99
    action     = "allow"
    cidr_block = "0.0.0.0/0"
    from_port  = 0
    to_port    = 0
  }
  ingress {
    protocol   = -1
    rule_no    = 100
    action     = "allow"
    cidr_block = aws_vpc.my-vpc.cidr_block
    from_port  = 0
    to_port    = 0
  }

  ingress {
    protocol   = "tcp"
    rule_no    = 101
    action     = "allow"
    cidr_block = "0.0.0.0/0"
    from_port  = 22
    to_port    = 22
  }

  egress {
    protocol   = -1
    rule_no    = 100
    action     = "allow"
    cidr_block = "0.0.0.0/0"
    from_port  = 0
    to_port    = 0
  }
}

resource "local_file" "tf_ansible_vars_file_new" {
  content = <<-DOC
    # Ansible vars_file containing variable values from Terraform.
    # Generated by Terraform mgmt configuration.

    tf_vpc_id: ${aws_vpc.my-vpc.id}
    tf_subnets: ${aws_subnet.my_subnet0.id},${aws_subnet.my_subnet1.id},${aws_subnet.my_subnet2.id}
    tf_master0az: ${aws_subnet.my_subnet0.availability_zone}
    tf_subnetazs: ${aws_subnet.my_subnet0.availability_zone},${aws_subnet.my_subnet1.availability_zone},${aws_subnet.my_subnet2.availability_zone}
    tf_route53: yoursubdomain.yourdomain.com

    DOC
  filename = "../ansible/tf_ansible_vars_file.yml"
}